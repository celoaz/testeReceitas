/*
 * This file is generated by jOOQ.
 */
package com.techx.generatedsources.entity.tables;


import com.techx.generatedsources.entity.DefaultSchema;
import com.techx.generatedsources.entity.Indexes;
import com.techx.generatedsources.entity.Keys;
import com.techx.generatedsources.entity.tables.records.IngredientsRecord;

import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.11.7"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Ingredients extends TableImpl<IngredientsRecord> {

    private static final long serialVersionUID = 1476592170;

    /**
     * The reference instance of <code>ingredients</code>
     */
    public static final Ingredients INGREDIENTS = new Ingredients();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<IngredientsRecord> getRecordType() {
        return IngredientsRecord.class;
    }

    /**
     * The column <code>ingredients.ID</code>.
     */
    public final TableField<IngredientsRecord, Integer> ID = createField("ID", org.jooq.impl.SQLDataType.INTEGER.nullable(false).identity(true), this, "");

    /**
     * The column <code>ingredients.INGREDIENT</code>.
     */
    public final TableField<IngredientsRecord, String> INGREDIENT = createField("INGREDIENT", org.jooq.impl.SQLDataType.VARCHAR(255).nullable(false), this, "");

    /**
     * The column <code>ingredients.RECIPE_NAME</code>.
     */
    public final TableField<IngredientsRecord, String> RECIPE_NAME = createField("RECIPE_NAME", org.jooq.impl.SQLDataType.VARCHAR(255).nullable(false), this, "");

    /**
     * Create a <code>ingredients</code> table reference
     */
    public Ingredients() {
        this(DSL.name("ingredients"), null);
    }

    /**
     * Create an aliased <code>ingredients</code> table reference
     */
    public Ingredients(String alias) {
        this(DSL.name(alias), INGREDIENTS);
    }

    /**
     * Create an aliased <code>ingredients</code> table reference
     */
    public Ingredients(Name alias) {
        this(alias, INGREDIENTS);
    }

    private Ingredients(Name alias, Table<IngredientsRecord> aliased) {
        this(alias, aliased, null);
    }

    private Ingredients(Name alias, Table<IngredientsRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""));
    }

    public <O extends Record> Ingredients(Table<O> child, ForeignKey<O, IngredientsRecord> key) {
        super(child, key, INGREDIENTS);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return DefaultSchema.DEFAULT_SCHEMA;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.INGREDIENTS_FK_INGREDIENTS_RECIPES, Indexes.INGREDIENTS_PRIMARY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Identity<IngredientsRecord, Integer> getIdentity() {
        return Keys.IDENTITY_INGREDIENTS;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<IngredientsRecord> getPrimaryKey() {
        return Keys.KEY_INGREDIENTS_PRIMARY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<IngredientsRecord>> getKeys() {
        return Arrays.<UniqueKey<IngredientsRecord>>asList(Keys.KEY_INGREDIENTS_PRIMARY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<ForeignKey<IngredientsRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<IngredientsRecord, ?>>asList(Keys.FK_INGREDIENTS_RECIPES);
    }

    public Recipes recipes() {
        return new Recipes(this, Keys.FK_INGREDIENTS_RECIPES);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Ingredients as(String alias) {
        return new Ingredients(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Ingredients as(Name alias) {
        return new Ingredients(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Ingredients rename(String name) {
        return new Ingredients(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Ingredients rename(Name name) {
        return new Ingredients(name, null);
    }
}
