/*
 * This file is generated by jOOQ.
 */
package com.techx.generatedsources.entity.tables;


import com.techx.generatedsources.entity.DefaultSchema;
import com.techx.generatedsources.entity.Indexes;
import com.techx.generatedsources.entity.Keys;
import com.techx.generatedsources.entity.tables.records.RecipesRecord;

import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.11.7"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Recipes extends TableImpl<RecipesRecord> {

    private static final long serialVersionUID = 601994964;

    /**
     * The reference instance of <code>recipes</code>
     */
    public static final Recipes RECIPES = new Recipes();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<RecipesRecord> getRecordType() {
        return RecipesRecord.class;
    }

    /**
     * The column <code>recipes.RECIPE_NAME</code>.
     */
    public final TableField<RecipesRecord, String> RECIPE_NAME = createField("RECIPE_NAME", org.jooq.impl.SQLDataType.VARCHAR(255).nullable(false), this, "");

    /**
     * The column <code>recipes.PREPARATION_METHOD</code>.
     */
    public final TableField<RecipesRecord, String> PREPARATION_METHOD = createField("PREPARATION_METHOD", org.jooq.impl.SQLDataType.VARCHAR(255).nullable(false), this, "");

    /**
     * Create a <code>recipes</code> table reference
     */
    public Recipes() {
        this(DSL.name("recipes"), null);
    }

    /**
     * Create an aliased <code>recipes</code> table reference
     */
    public Recipes(String alias) {
        this(DSL.name(alias), RECIPES);
    }

    /**
     * Create an aliased <code>recipes</code> table reference
     */
    public Recipes(Name alias) {
        this(alias, RECIPES);
    }

    private Recipes(Name alias, Table<RecipesRecord> aliased) {
        this(alias, aliased, null);
    }

    private Recipes(Name alias, Table<RecipesRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""));
    }

    public <O extends Record> Recipes(Table<O> child, ForeignKey<O, RecipesRecord> key) {
        super(child, key, RECIPES);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return DefaultSchema.DEFAULT_SCHEMA;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.RECIPES_PRIMARY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<RecipesRecord> getPrimaryKey() {
        return Keys.KEY_RECIPES_PRIMARY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<RecipesRecord>> getKeys() {
        return Arrays.<UniqueKey<RecipesRecord>>asList(Keys.KEY_RECIPES_PRIMARY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Recipes as(String alias) {
        return new Recipes(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Recipes as(Name alias) {
        return new Recipes(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Recipes rename(String name) {
        return new Recipes(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Recipes rename(Name name) {
        return new Recipes(name, null);
    }
}
