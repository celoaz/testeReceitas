/*
 * This file is generated by jOOQ.
 */
package com.techx.generatedsources.entity.tables;


import com.techx.generatedsources.entity.DefaultSchema;
import com.techx.generatedsources.entity.Indexes;
import com.techx.generatedsources.entity.Keys;
import com.techx.generatedsources.entity.tables.records.CategoriesRecord;

import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.11.7"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Categories extends TableImpl<CategoriesRecord> {

    private static final long serialVersionUID = 1840733479;

    /**
     * The reference instance of <code>categories</code>
     */
    public static final Categories CATEGORIES = new Categories();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<CategoriesRecord> getRecordType() {
        return CategoriesRecord.class;
    }

    /**
     * The column <code>categories.ID</code>.
     */
    public final TableField<CategoriesRecord, Integer> ID = createField("ID", org.jooq.impl.SQLDataType.INTEGER.nullable(false).identity(true), this, "");

    /**
     * The column <code>categories.CATEGORY_NAME</code>.
     */
    public final TableField<CategoriesRecord, String> CATEGORY_NAME = createField("CATEGORY_NAME", org.jooq.impl.SQLDataType.VARCHAR(255).nullable(false), this, "");

    /**
     * The column <code>categories.RECIPE_NAME</code>.
     */
    public final TableField<CategoriesRecord, String> RECIPE_NAME = createField("RECIPE_NAME", org.jooq.impl.SQLDataType.VARCHAR(255).nullable(false), this, "");

    /**
     * Create a <code>categories</code> table reference
     */
    public Categories() {
        this(DSL.name("categories"), null);
    }

    /**
     * Create an aliased <code>categories</code> table reference
     */
    public Categories(String alias) {
        this(DSL.name(alias), CATEGORIES);
    }

    /**
     * Create an aliased <code>categories</code> table reference
     */
    public Categories(Name alias) {
        this(alias, CATEGORIES);
    }

    private Categories(Name alias, Table<CategoriesRecord> aliased) {
        this(alias, aliased, null);
    }

    private Categories(Name alias, Table<CategoriesRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""));
    }

    public <O extends Record> Categories(Table<O> child, ForeignKey<O, CategoriesRecord> key) {
        super(child, key, CATEGORIES);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return DefaultSchema.DEFAULT_SCHEMA;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.CATEGORIES_FK_CATEGORIES_RECIPES, Indexes.CATEGORIES_PRIMARY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Identity<CategoriesRecord, Integer> getIdentity() {
        return Keys.IDENTITY_CATEGORIES;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<CategoriesRecord> getPrimaryKey() {
        return Keys.KEY_CATEGORIES_PRIMARY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<CategoriesRecord>> getKeys() {
        return Arrays.<UniqueKey<CategoriesRecord>>asList(Keys.KEY_CATEGORIES_PRIMARY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<ForeignKey<CategoriesRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<CategoriesRecord, ?>>asList(Keys.FK_CATEGORIES_RECIPES);
    }

    public Recipes recipes() {
        return new Recipes(this, Keys.FK_CATEGORIES_RECIPES);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Categories as(String alias) {
        return new Categories(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Categories as(Name alias) {
        return new Categories(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Categories rename(String name) {
        return new Categories(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Categories rename(Name name) {
        return new Categories(name, null);
    }
}
